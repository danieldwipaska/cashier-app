// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(uuid()) // @default(autoincrement())
  username   String         @unique
  password   String
  role       Role           @default(ADMIN)
  created_at DateTime       @default(now())
  updated_at DateTime       @default(now()) @updatedAt
  shops      UsersOnShops[]

  @@map("users")
}

model Shop {
  id                   String             @id @default(uuid()) // @default(autoincrement())
  code                 String             @unique
  name                 String
  discount_status      Boolean            @default(false)
  discount             Int                @default(0)
  discount_unit        String             @default("percent")
  tax                  Int                @default(0)
  service              Int                @default(0)
  included_tax_service Boolean            @default(true)
  created_at           DateTime           @default(now())
  updated_at           DateTime           @default(now()) @updatedAt
  BackofficeSetting    BackofficeSetting?

  crews    Crew[]
  users    UsersOnShops[]
  Fnbs     Fnbs[]
  Category Category[]
  Report   Report[]
  Card     Card[]
  Method   Method[]

  @@map("shops")
}

model UsersOnShops {
  shop    Shop   @relation(fields: [shop_id], references: [id])
  shop_id String
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@id([shop_id, user_id])
  @@map("users_on_shops")
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  shop       Shop     @relation(fields: [shop_id], references: [id])
  shop_id    String

  fnbs                   Fnbs[]
  crew_purchase_category CrewPurchaseCategory[]

  @@map("categories")
}

model CrewPurchaseCategory {
  backoffice_setting    BackofficeSetting @relation(fields: [backoffice_setting_id], references: [id])
  backoffice_setting_id String
  category              Category          @relation(fields: [category_id], references: [id])
  category_id           String

  @@id([backoffice_setting_id, category_id])
  @@map("crew_purchase_categories")
}

model Fnbs {
  id               String   @id @default(uuid())
  name             String   @unique
  price            Int
  availability     Boolean  @default(true)
  is_active        Boolean  @default(true)
  discount_status  Boolean  @default(false)
  discount_percent Int      @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
  category         Category @relation(fields: [category_id], references: [id])
  category_id      String
  shop             Shop     @relation(fields: [shop_id], references: [id])
  shop_id          String

  Item Item[]

  @@map("fnbs")
}

model Item {
  id               String   @id @default(uuid())
  fnb              Fnbs     @relation(fields: [fnb_id], references: [id])
  fnb_id           String
  amount           Int
  refunded_amount  Int      @default(0)
  discount_percent Int      @default(0)
  price            Int
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  report    Report @relation(fields: [report_id], references: [id])
  report_id String

  @@map("items")
}

model Report {
  id                              String       @id @default(uuid())
  report_id                       String       @default("")
  type                            ReportType
  status                          ReportStatus
  customer_name                   String
  customer_id                     String       @default("")
  card_number                     String       @default("")
  initial_balance                 Int          @default(0)
  final_balance                   Int          @default(0)
  total_payment                   Float
  included_tax_service            Boolean      @default(false)
  total_payment_after_tax_service Float        @default(0)
  tax_percent                     Float        @default(0)
  service_percent                 Float        @default(0)
  total_tax                       Float        @default(0)
  note                            String       @default("")
  is_deleted                      Boolean      @default(false)
  created_at                      DateTime     @default(now())
  updated_at                      DateTime     @default(now()) @updatedAt
  shop                            Shop         @relation(fields: [shop_id], references: [id])
  shop_id                         String
  crew                            Crew         @relation(fields: [crew_id], references: [id])
  crew_id                         String
  method                          Method?      @relation(fields: [method_id], references: [id])
  method_id                       String?

  Item Item[]

  @@map("reports")
}

model Card {
  id            String     @id @default(uuid())
  card_number   String     @unique
  customer_id   String     @default("")
  customer_name String     @default("")
  balance       Int        @default(0)
  status        CardStatus @default(INACTIVE)
  is_member     Boolean
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now()) @updatedAt
  shop          Shop       @relation(fields: [shop_id], references: [id])
  shop_id       String

  @@map("cards")
}

model Crew {
  id         String   @id @default(uuid())
  name       String   @unique
  code       String   @unique
  position   Position
  shop       Shop     @relation(fields: [shop_id], references: [id])
  shop_id    String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  Report     Report[]

  @@map("crews")
}

model BackofficeSetting {
  id      String @id @default(uuid())
  shop    Shop   @relation(fields: [shop_id], references: [id])
  shop_id String @unique

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  CrewPurchaseCategory CrewPurchaseCategory[]

  @@map("backoffice_settings")
}

model Method {
  id         String   @id @default(uuid())
  name       String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  shop       Shop     @relation(fields: [shop_id], references: [id])
  shop_id    String
  Report     Report[]

  @@map("methods")
}

enum ReportType {
  PAY
  TOPUP_AND_ACTIVATE
  TOPUP
  ADJUSTMENT
  CHECKOUT
}

enum ReportStatus {
  PAID
  UNPAID
  CANCELLED
}

enum Role {
  ADMIN
  MANAGER
  GREETER
  SERVER
}

enum Position {
  SERVER
  BARTENDER
  GREETER
}

enum CardStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  EXPIRED
}
